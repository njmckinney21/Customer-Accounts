/*
Nathan McKinney and Levi Leuthold
Created: 5/17/17
Modified: 5/20/17 - Completed program functionality but needs polishing.
Group project: Customers Accounts
Rogue Community College - Computer Science Department - Teacher: Cynthia Patterson
*/
#include <iostream>
#include <fstream>
using std::cout;
using std::cin;
using std::endl;
using std::ios;
using std::fstream;

//const for array size
const int NAME_SIZE = 30;
const int DATE_SIZE = 11;
const int ADDRESS_SIZE = 250;
const int CITY_STATE_ZIP = 250;
const int PHONE_SIZE = 15;

//sructure defintion
struct Customer
{
	char name[NAME_SIZE];
	char address[ADDRESS_SIZE];
	char CityStateZip[CITY_STATE_ZIP];
	char telephoneNumber[PHONE_SIZE];
	double accountBalance;
	char lastPayment[DATE_SIZE];
	bool isDeleted = false;
};

//function prototypes
void addAccount(fstream &);
void viewAccount(fstream &);
void changeAccount(fstream &);
void deleteAccount(fstream &);
void viewAll(fstream &);

int main()
{
	fstream customerAccounts;
	int choice;
	//display the menu and get choice
	do
	{
		//display menu
		cout << "1. Add a new account\n";
		cout << "2. View an existing account\n";
		cout << "3. Change an existing account\n";
		cout << "4. Delete an existing account\n";
		cout << "5. View all the accounts\n";
		cout << "6. Exit\n";

		//get users choice
		cout << "Enter your choice(1-6): ";
		cin >> choice;

		//validate the choice
		while (choice < 1 || choice > 6)
		{
			cout << "Error re-enter your choice (between 1-6): ";
			cin >> choice;
		}

		//process the selection 
		switch (choice)
		{
		case 1:
			addAccount(customerAccounts);
			break;
		case 2:
			viewAccount(customerAccounts);
			break;
		case 3:
			changeAccount(customerAccounts);
			break;
		case 4:
			deleteAccount(customerAccounts);
			break;
		case 5:
			viewAll(customerAccounts);
			break;
		}
	} while (choice != 6);
	return 0;
}

void addAccount(fstream & customerFile)
{
	//inventory variable to hold input
	Customer account;

	//open the file
	customerFile.open("customer.dat", ios::out | ios::app | ios::binary);

	//validate that the file opens 
	if (customerFile.fail())
	{
		cout << "Error opening the file.\n";
		exit(EXIT_FAILURE);
	}

	//get the inputs from the user for an account
	cin.get();
	cout << "\nName (Enter the first name of no more than 29 characters): ";
	cin.getline(account.name, NAME_SIZE);

	cout << "Address: ";
	cin.getline(account.address, ADDRESS_SIZE);

	cout << "Enter the city, state, and zip: ";
	cin.getline(account.CityStateZip, CITY_STATE_ZIP);

	cout << "Telephone Number (No special characters): ";
	cin.getline(account.telephoneNumber, PHONE_SIZE);

	cout << "Account Balance: ";
	cin >> account.accountBalance;

	cout << "Date of last payment (format: dd/mm/yyyy): ";
	cin >> account.lastPayment;
	account.isDeleted = false;

	//write the record
	customerFile.write(reinterpret_cast<char*>(&account), sizeof(account));

	//validate the record was written correctly
	if (customerFile.fail())
	{
		cout << "Error writing record to file.\n";
	}
	else
	{
		cout << "Record written to file.\n";
	}
	customerFile.close();
}//end of addAccount

void viewAccount(fstream & customerFile)
{
	int recordNum = 0;
	Customer account;

	//open the file 
	customerFile.open("customer.dat", ios::in | ios::binary);

	//validate that the file open correct
	if (customerFile.fail())
	{
		cout << "Error opening the file.\n";
		exit(EXIT_FAILURE);
	}
	//Ask the user to input a number to view the account 
	cout << "Enter the number of the record you would like to review: ";
	cin >> recordNum;
	recordNum -= 1;

	//seek to the account 
	customerFile.seekg(recordNum * sizeof(Customer), ios::beg);

	//validate that the file is found correctly 
	if (customerFile.fail())
	{
		cout << "\nError locating record.\n";
		customerFile.close();
		return;
	}

	//read the account 
	customerFile.read(reinterpret_cast<char *>(&account), sizeof(account));
	customerFile.close();

	//ask the user to enter one of the pharses 
	if (account.isDeleted == false)
	{
		cout << "Name: " << account.name << endl;
		cout << "Address: " << account.address << endl;
		cout << "City, state, and zip: " << account.CityStateZip << endl;
		cout << "Account balance: " << account.accountBalance << endl;
		cout << "Last payment: " << account.lastPayment << endl;
	}
	else
		cout << "Error: this record has been deleted." << endl;
}//end of viewAccount 

void changeAccount(fstream & customerFile)
{
	Customer account;
	int accChoice;

	//open the file
	customerFile.open("customer.dat", ios::in | ios::out | ios::binary);

	//validate if file opens correctly
	if (customerFile.fail())
	{
		cout << "Error opening the file.\n";
		exit(EXIT_FAILURE);
	}

	//ask the user to enter the record number to edit 
	cout << "Enter the record number of the item to edit: ";
	cin >> accChoice;
	accChoice -= 1;

	//seek to the record to read
	customerFile.seekg(accChoice * sizeof(account), ios::beg);

	//validate to see if file is found
	if (customerFile.fail())
	{
		cout << "\nERROR locating record.\n";
		customerFile.close();
		return;
	}

	//read the record
	customerFile.read(reinterpret_cast<char *>(&account), sizeof(account));

	//user inputs to find account they want to change
	cout << "Name: " << account.name << endl;
	cout << "Address: " << account.address << endl;
	cout << "City, state, and zip: " << account.CityStateZip << endl;
	cout << "Account balance: " << account.accountBalance << endl;
	cout << "Last payment: " << account.lastPayment << endl;
	cin.get();

	//the user enters the info for an account
	cout << "\nName (Enter the first name of no more than 29 characters): ";
	cin.getline(account.name, NAME_SIZE);
	cout << "Address: ";
	cin.getline(account.address, ADDRESS_SIZE);
	cout << "Enter the city, state, and zip: ";
	cin.getline(account.CityStateZip, CITY_STATE_ZIP);
	cout << "Telephone Number (No special characters): ";
	cin.getline(account.telephoneNumber, PHONE_SIZE);
	cout << "Account Balance: ";
	cin >> account.accountBalance;
	cout << "Date of last payment (format: dd/mm/yyyy): ";
	cin >> account.lastPayment;
	
	//seek to postion ot write
	customerFile.seekp(accChoice * sizeof(account), ios::beg);

	//write the new data over the ol data
	customerFile.write(reinterpret_cast<char *>(&account), sizeof(account));
	customerFile.close();
}//end of changeAccount

void deleteAccount(fstream & customerFile)
{
	Customer account;
	int accChoice;

	//open the file 
	customerFile.open("customer.dat", ios::in | ios::out | ios::binary);
	
	//validates that the file opens right 
	if (customerFile.fail())
	{
		cout << "Error opening the file.\n";
		exit(EXIT_FAILURE);
	}

	//ask the user to enter record number
	cout << "Enter the record number of the record to delete: ";
	cin >> accChoice;
	accChoice -= 1;

	//seek to the record to read
	customerFile.seekg(accChoice * sizeof(account), ios::beg);

	//validates that the file locates right
	if (customerFile.fail())
	{
		cout << "\nERROR locating record.\n";
		customerFile.close();
		return;
	}
	account.isDeleted = true;

	//seek to the position to write
	customerFile.seekp(accChoice * sizeof(account), ios::beg);

	//writes the new data over the old
	customerFile.write(reinterpret_cast<char *>(&account), sizeof(account));
	customerFile.close();
}//end of deleteAccount

void viewAll(fstream & customerFile)
{
	Customer account;
	int count = 0;

	//opens the file
	customerFile.open("customer.dat", ios::binary | ios::ate | ios::in);

	//validate the file opens right
	if (customerFile.fail())
	{
		cout << "Error opening the file.\n";
		exit(EXIT_FAILURE);
	}

	while (!customerFile.eof())
	{
		//seek to the account
		customerFile.seekg(count * sizeof(Customer), ios::beg);

		//validate that the location is found
		if (customerFile.fail())
		{
			cout << "\nError locating record.\n";
			customerFile.close();
			return;
		}

		//read the record
		customerFile.read(reinterpret_cast<char *>(&account), sizeof(account));

		//displays the content of the struct Customers
		if (account.isDeleted == false)
		{
			cout << "Name: " << account.name << endl;
			cout << "Address: " << account.address << endl;
			cout << "City, state, and zip: " << account.CityStateZip << endl;
			cout << "Account balance: " << account.accountBalance << endl;
			cout << "Last payment: " << account.lastPayment << endl;
		}
		count++;
	}
	customerFile.close();
}//end of viewAll
